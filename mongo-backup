#! /bin/bash

export PATH="$PATH:/opt/rancher/bin"

# Creates an EBS snapshot of mongo database. Locks mongo and
# freezes the filesystem before snapshotting

MONGO_DIR=${MONGO_DIR:?"MONGO_DIR must be set"}
MONGO_USER=${MONGO_USER:?"MONGO_USER must be set"}
MONGO_PASSWORD=${MONGO_PASSWORD:?"MONGO_PASSWORD must be set"}
MONGO_HOST=${MONGO_HOST:?"MONGO_HOST must be set"}
MONGO_PORT=${MONGO_PORT:-27017}
BACKUP_NAME=${BACKUP_NAME:?"BACKUP_NAME must be set"}

REGION=$(wget -qO- http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone)
ID=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-id)

primary=$(mongo $MONGO_HOST/admin --quiet --eval "rs.isMaster().primary")
if [[ "$primary" == "$MONGO_HOST:$MONGO_PORT" ]]; then
  echo "refusing to backup primary instance."
  sleep 30
  exit 1
fi

DEVICE=$(mount | grep $MONGO_DIR | awk '{ print $1 }')
VOLUME_ID=$(aws ec2 describe-volumes --region $REGION | jq -r '.Volumes[] | .Attachments[] | select(.Device == "'$DEVICE'" and .InstanceId == "'$ID'") | .VolumeId')

if [[ "$VOLUME_ID" == "" ]]; then
  echo "Cannot identify volume id to backup"
  sleep 30
  exit 1
fi

## Lock database
mongo ${MONGO_HOST}:${MONGO_PORT}/admin -u ${MONGO_USER} -p${MONGO_PASSWORD} --eval 'db.fsyncLock()'
fsfreeze -f ${MONGO_DIR}

## Create snapshots
SNAPSHOT_ID=$(aws ec2 create-snapshot --region $REGION --volume-id $VOLUME_ID | jq -r .SnapshotId)

## Unlock database
fsfreeze -u ${MONGO_DIR}
mongo ${MONGO_HOST}:${MONGO_PORT}/admin -u ${MONGO_USER} -p${MONGO_PASSWORD} --eval "db.fsyncUnlock()"

## Wait for snapshot to complete
SNAPSHOT_STATE=$(aws ec2 describe-snapshots --region $REGION --snapshot-id $SNAPSHOT_ID | jq -r '.Snapshots[] | .State')

while [[ "$SNAPSHOT_STATE" != "completed" ]]; do
  sleep 10
  echo "waiting for snapshot $SNAPSHOT_ID to complete..."
  SNAPSHOT_STATE=$(aws ec2 describe-snapshots --region $REGION --snapshot-id $SNAPSHOT_ID | jq -r '.Snapshots[] | .State')
done

echo "Tagging snapshot"
aws ec2 create-tags --region $REGION --resources $SNAPSHOT_ID --tags "Key=Name,Value=$BACKUP_NAME"

echo ":ok_hand: MongoDB backup $BACKUP_NAME completed" | slack -p -a 'good'

if [[ "${BACKUP_VERIFY}" != "true" ]]; then
  echo ":warning: Skipped verification of MongoDB backup $BACKUP_NAME ($SNAPSHOT_ID)" | slack -p -a 'warning'
else
  exec mongo-backup-verify $SNAPSHOT_ID
fi
